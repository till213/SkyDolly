cmake_minimum_required(VERSION 3.16...3.23)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

include(CMakePrintHelpers)
include(CheckIPOSupported)

set(APP_NAME "SkyDolly")
# Used to populate the Info.plist.in and SkyDolly.rc.in
set(PROJECT_APPLICATION_NAME "Sky Dolly")
set(PROJECT_ORGANISATION_NAME till213)

project(
    ${APP_NAME}
    VERSION 0.15.0
    DESCRIPTION "Sky Dolly - The Black Sheep for Your Flight Recordings"
    HOMEPAGE_URL "https://github.com/till213/SkyDolly"
    LANGUAGES CXX    
)

include(InitSubmodules)

# Enables testing: 'ctest' needs to be run in the "build" directory
include(CTest)

set(CMAKE_SHARED_LIBRARY_PREFIX "")
set(CMAKE_SHARED_MODULE_PREFIX "")
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Platform identifiers

# https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/How-To-Write-Platform-Checks
string(COMPARE EQUAL "Windows" ${CMAKE_SYSTEM_NAME} PLATFORM_IS_WINDOWS)
string(COMPARE EQUAL "Darwin" ${CMAKE_SYSTEM_NAME} PLATFORM_IS_MACOS)
string(COMPARE EQUAL "Linux" ${CMAKE_SYSTEM_NAME} PLATFORM_IS_LINUX)
cmake_print_variables(CMAKE_SYSTEM_NAME)

# Binary output locations
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
if(${PLATFORM_IS_MACOS})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${APP_NAME}.app/Contents/Frameworks)
else()
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif()

# Definitions

# Debug output
if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    add_compile_definitions(DEBUG)
endif()
# No use of deprecated Qt functionality before Qt 5.15
add_compile_definitions(QT_DISABLE_DEPRECATED_BEFORE=0x050F00)

# Qt
find_package(Qt6 REQUIRED COMPONENTS Widgets Sql LinguistTools)

# 3rd Party
# ordered-map (Tessil)
add_subdirectory(${CMAKE_SOURCE_DIR}/3rdParty/ordered-map)

# GeographicLib (https://github.com/geographiclib/geographiclib)
set(GEOGRAPHICLIB_LIB_TYPE SHARED)
add_subdirectory(${CMAKE_SOURCE_DIR}/3rdParty/geographiclib EXCLUDE_FROM_ALL)
set_target_properties(GeographicLib
    PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)

# Enabled link time optimisation (LTO) for release build, if available
if(NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug"))
    check_ipo_supported(RESULT ipo_support OUTPUT output LANGUAGES CXX)
    if(ipo_support)
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
        message(STATUS "IPO SUPPORT enabled")
    else()
        message(WARNING "IPO is not supported: ${output}")
    endif()
else()
    message(STATUS "IPO SUPPORT disabled for debug builds")
endif()

# Only enable auto-moccing for our own libraries and executables
# (not for the third-party libraries above)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# Application libraries
add_subdirectory(${CMAKE_SOURCE_DIR}/src/Kernel)
add_subdirectory(${CMAKE_SOURCE_DIR}/src/Model)
add_subdirectory(${CMAKE_SOURCE_DIR}/src/Persistence)
add_subdirectory(${CMAKE_SOURCE_DIR}/src/Flight)
add_subdirectory(${CMAKE_SOURCE_DIR}/src/Widget)
add_subdirectory(${CMAKE_SOURCE_DIR}/src/PluginManager)
add_subdirectory(${CMAKE_SOURCE_DIR}/src/UserInterface)

# Application
add_subdirectory(${CMAKE_SOURCE_DIR}/src/SkyDolly)

# Tests
add_subdirectory(${CMAKE_SOURCE_DIR}/test)

qt_create_translation(QM_FILES
    src
    i18n/${APP_NAME}_de_DE.ts
)

# Resource (data) files
add_subdirectory(${CMAKE_SOURCE_DIR}/3rdParty/geoids)
include(src/Persistence/cmake/Locations.cmake)

add_custom_target("SkyDollyProject")
target_sources("SkyDollyProject"
    PRIVATE
        BUILD.md
        CHANGELOG.md
        CODE_OF_CONDUCT.md
        README.md
        RELEASE.md
        SECURITY.md
        SHASUM256.md
        THIRD_PARTY.md
        doc/Design/Architecture.md
        doc/Design/README.md
        doc/SkyDolly.simvars
        doc/LICENSE
        ${QM_FILES}
)

# Plugins
add_subdirectory(${CMAKE_SOURCE_DIR}/src/Plugins)

# Documentation
add_subdirectory(${CMAKE_SOURCE_DIR}/doc)
